/****************************************************************************

Copyright (C) 2010  David W Orchard (david@errol.org.uk)

This file is part of the [lb] librray set,

[lb] is free software: you can redistribute it and/or modify
it under the terms of the GNU Leser General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

Foobar is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

import std.stdio;

unittest
{
    writeln(__FILE__ ~ " - Not implemented");
}

/*

The <stdio.h> header shall define the following macros as positive integer constant expressions:

BUFSIZ
Size of <stdio.h> buffers.
_IOFBF
Input/output fully buffered.
_IOLBF
Input/output line buffered.
_IONBF
Input/output unbuffered.
L_ctermid
[CX] [Option Start] Maximum size of character array to hold ctermid() output. [Option End]
L_tmpnam
Maximum size of character array to hold tmpnam() output.
SEEK_CUR
Seek relative to current position.
SEEK_END
Seek relative to end-of-file.
SEEK_SET
Seek relative to start-of-file.

The following macros shall be defined as positive integer constant expressions which denote implementation limits:

{FILENAME_MAX}
Maximum size in bytes of the longest filename string that the implementation guarantees can be opened.
{FOPEN_MAX}
Number of streams which the implementation guarantees can be open simultaneously. The value is at least eight.
{TMP_MAX}
Minimum number of unique filenames generated by tmpnam(). Maximum number of times an application can call tmpnam() reliably. The value of {TMP_MAX} is at least 25. [XSI] [Option Start]  On XSI-conformant systems, the value of {TMP_MAX} is at least 10000. [Option End]

The following macro name shall be defined as a negative integer constant expression:

EOF
End-of-file return value.

The following macro name shall be defined as a null pointer constant:

NULL
Null pointer.

The following macro name shall be defined as a string constant:

P_tmpdir
[XSI] [Option Start] Default directory prefix for tempnam(). [Option End]

The following shall be defined as expressions of type "pointer to FILE" that point to the FILE objects associated, respectively, with the standard error, input, and output streams:

stderr
Standard error output stream.
stdin
Standard input stream.
stdout
Standard output stream.

The following data types shall be defined through typedef:

FILE
A structure containing information about a file.
fpos_t
A non-array type containing all information needed to specify uniquely every position within a file.
va_list
[XSI] [Option Start] As described in <stdarg.h>. [Option End]
size_t
As described in <stddef.h>.

The following shall be declared as functions and may also be defined as macros. Function prototypes shall be provided.

void     clearerr(FILE *);
[CX][Option Start]
char    *ctermid(char *);
[Option End]
int      fclose(FILE *);
[CX][Option Start]
FILE    *fdopen(int, const char *);
[Option End]
int      feof(FILE *);
int      ferror(FILE *);
int      fflush(FILE *);
int      fgetc(FILE *);
int      fgetpos(FILE *restrict, fpos_t *restrict);
char    *fgets(char *restrict, int, FILE *restrict);
[CX][Option Start]
int      fileno(FILE *);
[Option End]
[TSF][Option Start]
void     flockfile(FILE *);
[Option End]
FILE    *fopen(const char *restrict, const char *restrict);
int      fprintf(FILE *restrict, const char *restrict, ...);
int      fputc(int, FILE *);
int      fputs(const char *restrict, FILE *restrict);
size_t   fread(void *restrict, size_t, size_t, FILE *restrict);
FILE    *freopen(const char *restrict, const char *restrict,
FILE *restrict);
int      fscanf(FILE *restrict, const char *restrict, ...);
int      fseek(FILE *, long, int);
[CX][Option Start]
int      fseeko(FILE *, off_t, int);
[Option End]
int      fsetpos(FILE *, const fpos_t *);
long     ftell(FILE *);
[CX][Option Start]
off_t    ftello(FILE *);
[Option End]
[TSF][Option Start]
int      ftrylockfile(FILE *);
void     funlockfile(FILE *);
[Option End]
size_t   fwrite(const void *restrict, size_t, size_t, FILE *restrict);
int      getc(FILE *);
int      getchar(void);
[TSF][Option Start]
int      getc_unlocked(FILE *);
int      getchar_unlocked(void);
[Option End]
char    *gets(char *);
[CX][Option Start]
int      pclose(FILE *);
[Option End]
void     perror(const char *);
[CX][Option Start]
FILE    *popen(const char *, const char *);
[Option End]
int      printf(const char *restrict, ...);
int      putc(int, FILE *);
int      putchar(int);
[TSF][Option Start]
int      putc_unlocked(int, FILE *);
int      putchar_unlocked(int);
[Option End]
int      puts(const char *);
int      remove(const char *);
int      rename(const char *, const char *);
void     rewind(FILE *);
int      scanf(const char *restrict, ...);
void     setbuf(FILE *restrict, char *restrict);
int      setvbuf(FILE *restrict, char *restrict, int, size_t);
int      snprintf(char *restrict, size_t, const char *restrict, ...);
int      sprintf(char *restrict, const char *restrict, ...);
int      sscanf(const char *restrict, const char *restrict, int ...);
[XSI][Option Start]
char    *tempnam(const char *, const char *);
[Option End]
FILE    *tmpfile(void);
char    *tmpnam(char *);
int      ungetc(int, FILE *);
int      vfprintf(FILE *restrict, const char *restrict, va_list);
int      vfscanf(FILE *restrict, const char *restrict, va_list);
int      vprintf(const char *restrict, va_list);
int      vscanf(const char *restrict, va_list);
int      vsnprintf(char *restrict, size_t, const char *restrict,
va_list);
int      vsprintf(char *restrict, const char *restrict, va_list);
int      vsscanf(const char *restrict, const char *restrict,
va_list arg);




*/