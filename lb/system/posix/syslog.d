/****************************************************************************

Copyright (C) 2010  David W Orchard (david@errol.org.uk)

This file is part of the [lb] librray set,

[lb] is free software: you can redistribute it and/or modify
it under the terms of the GNU Leser General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

Foobar is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

import std.stdio;

unittest
{
    writeln(__FILE__ ~ " - Not implemented");
}

/*

The <syslog.h> header shall define the following symbolic constants, zero or more of which may be OR'ed together to form the logopt option of openlog():

LOG_PID
Log the process ID with each message.
LOG_CONS
Log to the system console on error.
LOG_NDELAY
Connect to syslog daemon immediately.
LOG_ODELAY
Delay open until syslog() is called.
LOG_NOWAIT
Do not wait for child processes.

The following symbolic constants shall be defined as possible values of the facility argument to openlog():

LOG_KERN
Reserved for message generated by the system.
LOG_USER
Message generated by a process.
LOG_MAIL
Reserved for message generated by mail system.
LOG_NEWS
Reserved for message generated by news system.
LOG_UUCP
Reserved for message generated by UUCP system.
LOG_DAEMON
Reserved for message generated by system daemon.
LOG_AUTH
Reserved for message generated by authorization daemon.
LOG_CRON
Reserved for message generated by clock daemon.
LOG_LPR
Reserved for message generated by printer system.
LOG_LOCAL0
Reserved for local use.
LOG_LOCAL1
Reserved for local use.
LOG_LOCAL2
Reserved for local use.
LOG_LOCAL3
Reserved for local use.
LOG_LOCAL4
Reserved for local use.
LOG_LOCAL5
Reserved for local use.
LOG_LOCAL6
Reserved for local use.
LOG_LOCAL7
Reserved for local use.

The following shall be declared as macros for constructing the maskpri argument to setlogmask(). The following macros expand to an expression of type int when the argument pri is an expression of type int:

LOG_MASK(pri)
A mask for priority pri.

The following constants shall be defined as possible values for the priority argument of syslog():

LOG_EMERG
A panic condition was reported to all processes.
LOG_ALERT
A condition that should be corrected immediately.
LOG_CRIT
A critical condition.
LOG_ERR
An error message.
LOG_WARNING
A warning message.
LOG_NOTICE
A condition requiring special handling.
LOG_INFO
A general information message.
LOG_DEBUG
A message useful for debugging programs.

The following shall be declared as functions and may also be defined as macros. Function prototypes shall be provided.

void  closelog(void);
void  openlog(const char *, int, int);
int   setlogmask(int);
void  syslog(int, const char *, ...);






*/